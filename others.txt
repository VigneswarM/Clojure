(defn regex
  [c]
  (if ((set "<([{\\^-=$!|]})?*+.>") c)
    (re-pattern (str "\\" c))
    (re-pattern c)))

	
	(defn oldreadCustList []
  (def custlist_var (slurp "cust.txt"))
       (def custlist (clojure.string/split-lines custlist_var))
         ( def custlen (alength (to-array custlist)))
         (println custlen)
        (println "")
      ;;(doseq [item custlist] (print(clojure.string/split item #"\|")))
       ;;(doseq [item custlist] (doseq [val (clojure.string/split item #"\|")] (println val) ) )
            
      (doseq [item custlist] 
           (def value (clojure.string/split item #"\|"))
           ;;(print value)
           (def custID (get value 0))
           (def custname (get value 1))
           (def address (get value 2))
           (def phone (get value 3))
          ;; (println "id: " custID "name :" custname "address: " address "phone: " phone)
           (swap! Custmap assoc (Integer/parseInt(first value)) (rest value) )
           (println @Custmap)
           ;;(swap! Custmap assoc {})
         )
   )
      
      


(defn new_readCustList []
  (def custlist_var (slurp "cust.txt"))
       (def custlist (clojure.string/split-lines custlist_var))
         ;;(println "custlist : \n" custlist "\n")
       ;;(perform [custlist])
         ( def custlen (alength (to-array custlist)))
         (println custlen)
           (println (get custlist 0))
           (println (get custlist 1))
           (println (get custlist 2))
           (def custlist_split (let [break (regex \|)] (clojure.string/split (get custlist 0) break)))
     (println "custlist_split:\n" custlist_split )
     ( def len (alength (to-array custlist_split)))
     (println len)
      (println (get custlist_split 0))
      (println (get custlist_split 1))
     (println (get custlist_split 2))
     (println (get custlist_split 3))
     
     
      ;; (def custlist (clojure.string/join ", "(clojure.string/split-lines custlist_var)))
       
       )
